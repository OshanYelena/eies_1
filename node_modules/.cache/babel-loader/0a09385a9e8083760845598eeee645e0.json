{"ast":null,"code":"import _slicedToArray from\"/Users/oshanranasinghe/Desktop/app1/untitled folder/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var images=['https://images.unsplash.com/photo-1506501139174-099022df5260?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1351&q=80','https://images.unsplash.com/photo-1523438097201-512ae7d59c44?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80','https://images.unsplash.com/photo-1513026705753-bc3fffca8bf4?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80'];// images must be an array of urls , if using Next JS this could something like\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\n// images must be an array of urls , if using Next JS this could something like\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\nexport default function Carousel(){// We will start by storing the index of the current image in the state.\nvar _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),currentImage=_React$useState2[0],setCurrentImage=_React$useState2[1];// We are using react ref to 'tag' each of the images. Below will create an array of\n// objects with numbered keys. We will use those numbers (i) later to access a ref of a\n// specific image in this array.\nvar refs=images.reduce(function(acc,val,i){acc[i]=/*#__PURE__*/React.createRef();return acc;},{});var scrollToImage=function scrollToImage(i){// First let's set the index of the image we want to see next\nsetCurrentImage(i);// Now, this is where the magic happens. We 'tagged' each one of the images with a ref,\n// we can then use built-in scrollIntoView API to do eaxactly what it says on the box - scroll it into\n// your current view! To do so we pass an index of the image, which is then use to identify our current\n// image's ref in 'refs' array above.\nrefs[i].current.scrollIntoView({//     Defines the transition animation.\nbehavior:'smooth',//      Defines vertical alignment.\nblock:'nearest',//      Defines horizontal alignment.\ninline:'start'});};// Some validation for checking the array length could be added if needed\nvar totalImages=images.length;// Below functions will assure that after last image we'll scroll back to the start,\n// or another way round - first to last in previousImage method.\nvar nextImage=function nextImage(){if(currentImage>=totalImages-1){scrollToImage(0);}else{scrollToImage(currentImage+1);}};var previousImage=function previousImage(){if(currentImage===0){scrollToImage(totalImages-1);}else{scrollToImage(currentImage-1);}};// Tailwind styles. Most importantly notice position absolute, this will sit relative to the carousel's outer div.\nvar arrowStyle='absolute text-white text-2xl z-10 bg-black h-10 w-10 rounded-full opacity-75 flex items-center justify-center';// Let's create dynamic buttons. It can be either left or right. Using\n// isLeft boolean we can determine which side we'll be rendering our button\n// as well as change its position and content.\nvar sliderControl=function sliderControl(isLeft){return/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:isLeft?previousImage:nextImage,className:\"\".concat(arrowStyle,\" \").concat(isLeft?'left-2':'right-2'),style:{top:'40%'},children:/*#__PURE__*/_jsx(\"span\",{role:\"img\",\"aria-label\":\"Arrow \".concat(isLeft?'left':'right'),children:isLeft?'◀':'▶'})});};return/*#__PURE__*/ (// Images are placed using inline flex. We then wrap an image in a div\n// with flex-shrink-0 to stop it from 'shrinking' to fit the outer div.\n// Finally the image itself will be 100% of a parent div. Outer div is\n// set with position relative, so we can place our cotrol buttons using\n// absolute positioning on each side of the image.\n_jsx(\"div\",{className:\"p-12 flex justify-center w-screen md:w-1/2 items-center\",children:/*#__PURE__*/_jsx(\"div\",{className:\"relative w-full\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"carousel\",children:[sliderControl(true),images.map(function(img,i){return/*#__PURE__*/_jsx(\"div\",{className:\"w-full flex-shrink-0\",ref:refs[i],children:/*#__PURE__*/_jsx(\"img\",{src:img,className:\"w-full object-contain\"})},img);}),sliderControl()]})})}));};","map":{"version":3,"names":["React","images","Carousel","useState","currentImage","setCurrentImage","refs","reduce","acc","val","i","createRef","scrollToImage","current","scrollIntoView","behavior","block","inline","totalImages","length","nextImage","previousImage","arrowStyle","sliderControl","isLeft","top","map","img"],"sources":["/Users/oshanranasinghe/Desktop/app1/untitled folder/src/components/slider/slider.js"],"sourcesContent":["import React from \"react\";\n\n\nconst images = ['https://images.unsplash.com/photo-1506501139174-099022df5260?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1351&q=80', 'https://images.unsplash.com/photo-1523438097201-512ae7d59c44?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80', 'https://images.unsplash.com/photo-1513026705753-bc3fffca8bf4?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80']\n// images must be an array of urls , if using Next JS this could something like\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\n// images must be an array of urls , if using Next JS this could something like\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\n\n\n export default function Carousel () {\n  // We will start by storing the index of the current image in the state.\n  const [currentImage, setCurrentImage] = React.useState(0);\n\n  // We are using react ref to 'tag' each of the images. Below will create an array of\n  // objects with numbered keys. We will use those numbers (i) later to access a ref of a\n  // specific image in this array.\n  const refs = images.reduce((acc, val, i) => {\n    acc[i] = React.createRef();\n    return acc;\n  }, {});\n\n  const scrollToImage = i => {\n    // First let's set the index of the image we want to see next\n    setCurrentImage(i);\n    // Now, this is where the magic happens. We 'tagged' each one of the images with a ref,\n    // we can then use built-in scrollIntoView API to do eaxactly what it says on the box - scroll it into\n    // your current view! To do so we pass an index of the image, which is then use to identify our current\n    // image's ref in 'refs' array above.\n    refs[i].current.scrollIntoView({\n      //     Defines the transition animation.\n      behavior: 'smooth',\n      //      Defines vertical alignment.\n      block: 'nearest',\n      //      Defines horizontal alignment.\n      inline: 'start',\n    });\n  };\n\n  // Some validation for checking the array length could be added if needed\n  const totalImages = images.length;\n\n  // Below functions will assure that after last image we'll scroll back to the start,\n  // or another way round - first to last in previousImage method.\n  const nextImage = () => {\n    if (currentImage >= totalImages - 1) {\n      scrollToImage(0);\n    } else {\n      scrollToImage(currentImage + 1);\n    }\n  };\n\n  const previousImage = () => {\n    if (currentImage === 0) {\n      scrollToImage(totalImages - 1);\n    } else {\n      scrollToImage(currentImage - 1);\n    }\n  };\n\n  // Tailwind styles. Most importantly notice position absolute, this will sit relative to the carousel's outer div.\n  const arrowStyle =\n    'absolute text-white text-2xl z-10 bg-black h-10 w-10 rounded-full opacity-75 flex items-center justify-center';\n\n  // Let's create dynamic buttons. It can be either left or right. Using\n  // isLeft boolean we can determine which side we'll be rendering our button\n  // as well as change its position and content.\n  const sliderControl = isLeft => (\n    <button\n      type=\"button\"\n      onClick={isLeft ? previousImage : nextImage}\n      className={`${arrowStyle} ${isLeft ? 'left-2' : 'right-2'}`}\n      style={{ top: '40%' }}\n    >\n      <span role=\"img\" aria-label={`Arrow ${isLeft ? 'left' : 'right'}`}>\n        {isLeft ? '◀' : '▶'}\n      </span>\n    </button>\n  );\n\n  return (\n  // Images are placed using inline flex. We then wrap an image in a div\n  // with flex-shrink-0 to stop it from 'shrinking' to fit the outer div.\n  // Finally the image itself will be 100% of a parent div. Outer div is\n  // set with position relative, so we can place our cotrol buttons using\n  // absolute positioning on each side of the image.\n    <div className=\"p-12 flex justify-center w-screen md:w-1/2 items-center\">\n      <div className=\"relative w-full\">\n        <div className=\"carousel\">\n          {sliderControl(true)}\n          {images.map((img, i) => (\n            <div className=\"w-full flex-shrink-0\" key={img} ref={refs[i]}>\n              <img src={img} className=\"w-full object-contain\" />\n            </div>\n          ))}\n          {sliderControl()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n"],"mappings":"yIAAA,MAAOA,MAAP,KAAkB,OAAlB,C,wFAGA,GAAMC,OAAM,CAAG,CAAC,kKAAD,CAAqK,kKAArK,CAAyU,kKAAzU,CAAf,CACA;AACA;AACA;AACA;AAGC,cAAe,SAASC,SAAT,EAAqB,CACnC;AACA,oBAAwCF,KAAK,CAACG,QAAN,CAAe,CAAf,CAAxC,oDAAOC,YAAP,qBAAqBC,eAArB,qBAEA;AACA;AACA;AACA,GAAMC,KAAI,CAAGL,MAAM,CAACM,MAAP,CAAc,SAACC,GAAD,CAAMC,GAAN,CAAWC,CAAX,CAAiB,CAC1CF,GAAG,CAACE,CAAD,CAAH,cAASV,KAAK,CAACW,SAAN,EAAT,CACA,MAAOH,IAAP,CACD,CAHY,CAGV,EAHU,CAAb,CAKA,GAAMI,cAAa,CAAG,QAAhBA,cAAgB,CAAAF,CAAC,CAAI,CACzB;AACAL,eAAe,CAACK,CAAD,CAAf,CACA;AACA;AACA;AACA;AACAJ,IAAI,CAACI,CAAD,CAAJ,CAAQG,OAAR,CAAgBC,cAAhB,CAA+B,CAC7B;AACAC,QAAQ,CAAE,QAFmB,CAG7B;AACAC,KAAK,CAAE,SAJsB,CAK7B;AACAC,MAAM,CAAE,OANqB,CAA/B,EAQD,CAfD,CAiBA;AACA,GAAMC,YAAW,CAAGjB,MAAM,CAACkB,MAA3B,CAEA;AACA;AACA,GAAMC,UAAS,CAAG,QAAZA,UAAY,EAAM,CACtB,GAAIhB,YAAY,EAAIc,WAAW,CAAG,CAAlC,CAAqC,CACnCN,aAAa,CAAC,CAAD,CAAb,CACD,CAFD,IAEO,CACLA,aAAa,CAACR,YAAY,CAAG,CAAhB,CAAb,CACD,CACF,CAND,CAQA,GAAMiB,cAAa,CAAG,QAAhBA,cAAgB,EAAM,CAC1B,GAAIjB,YAAY,GAAK,CAArB,CAAwB,CACtBQ,aAAa,CAACM,WAAW,CAAG,CAAf,CAAb,CACD,CAFD,IAEO,CACLN,aAAa,CAACR,YAAY,CAAG,CAAhB,CAAb,CACD,CACF,CAND,CAQA;AACA,GAAMkB,WAAU,CACd,+GADF,CAGA;AACA;AACA;AACA,GAAMC,cAAa,CAAG,QAAhBA,cAAgB,CAAAC,MAAM,qBAC1B,eACE,IAAI,CAAC,QADP,CAEE,OAAO,CAAEA,MAAM,CAAGH,aAAH,CAAmBD,SAFpC,CAGE,SAAS,WAAKE,UAAL,aAAmBE,MAAM,CAAG,QAAH,CAAc,SAAvC,CAHX,CAIE,KAAK,CAAE,CAAEC,GAAG,CAAE,KAAP,CAJT,uBAME,aAAM,IAAI,CAAC,KAAX,CAAiB,6BAAqBD,MAAM,CAAG,MAAH,CAAY,OAAvC,CAAjB,UACGA,MAAM,CAAG,GAAH,CAAS,GADlB,EANF,EAD0B,EAA5B,CAaA,oBACA;AACA;AACA;AACA;AACA;AACE,YAAK,SAAS,CAAC,yDAAf,uBACE,YAAK,SAAS,CAAC,iBAAf,uBACE,aAAK,SAAS,CAAC,UAAf,WACGD,aAAa,CAAC,IAAD,CADhB,CAEGtB,MAAM,CAACyB,GAAP,CAAW,SAACC,GAAD,CAAMjB,CAAN,qBACV,YAAK,SAAS,CAAC,sBAAf,CAAgD,GAAG,CAAEJ,IAAI,CAACI,CAAD,CAAzD,uBACE,YAAK,GAAG,CAAEiB,GAAV,CAAe,SAAS,CAAC,uBAAzB,EADF,EAA2CA,GAA3C,CADU,EAAX,CAFH,CAOGJ,aAAa,EAPhB,GADF,EADF,EANF,EAoBD"},"metadata":{},"sourceType":"module"}